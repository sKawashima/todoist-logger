/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TodoistLogger
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiToken: "",
  includeProject: true,
  includeTime: false,
  headingLevel: 2,
  lastSelectedDate: ""
};
var TodoistLogger = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "insert-completed-tasks",
      name: "Insert completed tasks",
      callback: () => {
        new DatePickerModal(this.app, this, async (date) => {
          await this.insertCompletedTasks(date);
        }).open();
      }
    });
    this.addSettingTab(new TodoistLoggerSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async insertCompletedTasks(date) {
    var _a, _b;
    if (!this.settings.apiToken) {
      new import_obsidian.Notice("Please set your Todoist API token in the plugin settings");
      return;
    }
    try {
      new import_obsidian.Notice("Fetching completed tasks...");
      const completedData = await this.fetchCompletedTasks(date);
      const markdown = this.formatTasksAsMarkdown(completedData, date);
      const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
      if (editor) {
        editor.replaceSelection(markdown);
        new import_obsidian.Notice(`Inserted ${((_b = completedData.items) == null ? void 0 : _b.length) || 0} completed tasks`);
      } else {
        new import_obsidian.Notice("No active editor found");
      }
      this.settings.lastSelectedDate = date.toISOString();
      await this.saveSettings();
    } catch (error) {
      console.error("Error fetching tasks:", error);
      new import_obsidian.Notice(`Error: ${error.message}`);
    }
  }
  async fetchCompletedTasks(date) {
    const { since, until } = this.getDateRange(date);
    const url = `https://api.todoist.com/sync/v9/completed/get_all?since=${since}&until=${until}`;
    const response = await fetch(url, {
      headers: {
        "Authorization": `Bearer ${this.settings.apiToken}`
      }
    });
    if (!response.ok) {
      throw new Error(`API error: ${response.status} - ${response.statusText}`);
    }
    return await response.json();
  }
  getDateRange(date) {
    const startOfDay = new Date(date);
    startOfDay.setHours(0, 0, 0, 0);
    const endOfDay = new Date(date);
    endOfDay.setHours(23, 59, 59, 999);
    return {
      since: startOfDay.toISOString(),
      until: endOfDay.toISOString()
    };
  }
  formatTasksAsMarkdown(data, date) {
    const { items = [], projects = {} } = data;
    if (items.length === 0) {
      return `${"#".repeat(this.settings.headingLevel)} ${date.toLocaleDateString("ja-JP")} \u5B8C\u4E86\u30BF\u30B9\u30AF

\u6307\u5B9A\u3055\u308C\u305F\u65E5\u4ED8\u306B\u5B8C\u4E86\u3057\u305F\u30BF\u30B9\u30AF\u306F\u3042\u308A\u307E\u305B\u3093\u3002
`;
    }
    const lines = [];
    lines.push(`${"#".repeat(this.settings.headingLevel)} ${date.toLocaleDateString("ja-JP")} \u5B8C\u4E86\u30BF\u30B9\u30AF
`);
    items.forEach((item) => {
      let line = `- ${item.content}`;
      if (this.settings.includeProject && item.project_id && projects[item.project_id]) {
        line += ` [${projects[item.project_id].name}]`;
      }
      if (this.settings.includeTime) {
        const completedTime = new Date(item.completed_at);
        line += ` (${completedTime.toLocaleTimeString("ja-JP", { hour: "2-digit", minute: "2-digit" })})`;
      }
      lines.push(line);
    });
    return lines.join("\n") + "\n";
  }
};
var DatePickerModal = class extends import_obsidian.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
    if (this.plugin.settings.lastSelectedDate) {
      this.selectedDate = new Date(this.plugin.settings.lastSelectedDate);
    } else {
      this.selectedDate = new Date();
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Select Date" });
    new import_obsidian.Setting(contentEl).setName("Date").setDesc("Select the date for completed tasks").addText((text) => {
      const dateStr = this.selectedDate.toISOString().split("T")[0];
      text.setValue(dateStr);
      text.inputEl.type = "date";
      text.onChange((value) => {
        this.selectedDate = new Date(value + "T00:00:00");
      });
    });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Today").onClick(() => {
      this.selectedDate = new Date();
      this.close();
      this.onSubmit(this.selectedDate);
    })).addButton((btn) => btn.setButtonText("Yesterday").onClick(() => {
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      this.selectedDate = yesterday;
      this.close();
      this.onSubmit(this.selectedDate);
    })).addButton((btn) => btn.setButtonText("Insert").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.selectedDate);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var TodoistLoggerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Todoist Logger Settings" });
    new import_obsidian.Setting(containerEl).setName("API Token").setDesc("Your Todoist API token (get it from todoist.com/app/settings/integrations/developer)").addText((text) => text.setPlaceholder("Enter your API token").setValue(this.plugin.settings.apiToken).onChange(async (value) => {
      this.plugin.settings.apiToken = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Include project name").setDesc("Show project name with each task").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeProject).onChange(async (value) => {
      this.plugin.settings.includeProject = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Include completion time").setDesc("Show the time when the task was completed").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeTime).onChange(async (value) => {
      this.plugin.settings.includeTime = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Heading level").setDesc("Heading level for the date title (1-6)").addSlider((slider) => slider.setLimits(1, 6, 1).setValue(this.plugin.settings.headingLevel).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.headingLevel = value;
      await this.plugin.saveSettings();
    }));
  }
};
